@page "/ajustes"
@using GestionInventario.Client2.Services.Ajuste
@using GestionInventarios.Shared.DTOs.Ajuste
@inject IAjusteServicio AjusteService
@inject NavigationManager NavigationManager


<h3>Ajustes</h3>

@if (ajustes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Producto Id</th>
                <th>Almacen Id</th>
                <th>Cantidad</th>
                <th>Fecha</th>
                <th>Tipo</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ajuste in ajustes)
            {
                <tr>
                    <td>@ajuste.AjusteId</td>
                    <td>@ajuste.ProductoId</td>
                    <td>@ajuste.AlmacenId</td>
                    <td>@ajuste.Cantidad</td>
                    <td>@ajuste.Fecha</td>
                    <td>@ajuste.Tipo</td>
                    <td>
                        <button @onclick="() => EditAjuste(ajuste.AjusteId)">Editar</button>
                        <button @onclick="() => DeleteAjuste(ajuste.AjusteId)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="CreateAjuste">Crear Nuevo Ajuste</button>
}

@code {
    private List<AjusteGetDTO>
    ajustes;

    protected override async Task OnInitializedAsync()
    {
        ajustes = await AjusteService.GetAjustesAsync();
    }

    private void CreateAjuste()
    {
        NavigationManager.NavigateTo("/ajustes/create");
    }

    private void EditAjuste(int id)
    {
        NavigationManager.NavigateTo($"/ajustes/edit/{id}");
    }

    private async Task DeleteAjuste(int id)
    {
        await AjusteService.DeleteAjusteAsync(id);
        ajustes = await AjusteService.GetAjustesAsync(); // Reload the list
    }
}
