@page "/ajustes"
@using GestionInventario.Client2.Services.Ajuste
@using GestionInventarios.Shared.DTOs.Ajuste
@using GestionInventarios.Shared.DTOs.Producto
@using GestionInventarios.Shared.DTOs.Almacen
@inject IAjusteServicio AjusteService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h3 class="mb-4">Ajustes</h3>

    @if (ajustes == null || productos == null || almacenes == null)
    {
        <div class="alert alert-info" role="alert">
            <strong>Cargando...</strong>
        </div>
    }
    else
    {
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Id</th>
                    <th>Producto</th>
                    <th>Almacen</th>
                    <th>Cantidad</th>
                    <th>Fecha</th>
                    <th>Tipo</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ajuste in ajustes)
                {
                    <tr>
                        <td>@ajuste.AjusteId</td>
                        <td>@productos.FirstOrDefault(p => p.ProductoId == ajuste.ProductoId)?.Nombre</td>
                        <td>@almacenes.FirstOrDefault(a => a.AlmacenId == ajuste.AlmacenId)?.Nombre</td>
                        <td>@ajuste.Cantidad</td>
                        <td>@ajuste.Fecha.ToShortDateString()</td>
                        <td>@ajuste.Tipo</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditAjuste(ajuste.AjusteId)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteAjuste(ajuste.AjusteId)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick="CreateAjuste">Crear Nuevo Ajuste</button>
    }
</div>

@code {
    private List<AjusteGetDTO> ajustes;
    private List<ProductoGetDTO> productos;
    private List<AlmacenGetDTO> almacenes;

    protected override async Task OnInitializedAsync()
    {
        ajustes = await AjusteService.GetAjustesAsync();
        productos = await AjusteService.GetProductosAsync();
        almacenes = await AjusteService.GetAlmacenesAsync();
    }

    private void CreateAjuste()
    {
        NavigationManager.NavigateTo("/ajustes/create");
    }

    private void EditAjuste(int id)
    {
        NavigationManager.NavigateTo($"/ajustes/edit/{id}");
    }

    private async Task DeleteAjuste(int id)
    {
        await AjusteService.DeleteAjusteAsync(id);
        ajustes = await AjusteService.GetAjustesAsync(); // Reload the list
    }
}
