@page "/proveedores/edit/{id:int}"
@using GestionInventario.Client2.Services.Proveedor
@using GestionInventarios.Shared.DTOs.Proveedor
@inject IProveedorService ProveedorService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h3 class="mb-4">Editar Proveedor</h3>

    <EditForm Model="editProveedor" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nombre:</label>
            <InputText @bind-Value="editProveedor.Nombre" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Dirección:</label>
            <InputText @bind-Value="editProveedor.Direccion" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Teléfono:</label>
            <InputText @bind-Value="editProveedor.Telefono" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Guardar</button>
    </EditForm>
</div>

@code {
    private ProveedorPutDTO editProveedor = new ProveedorPutDTO();

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var proveedor = await ProveedorService.GetProveedorByIdAsync(id);
        if (proveedor != null)
        {
            editProveedor.ProveedorId = proveedor.ProveedorId;
            editProveedor.Nombre = proveedor.Nombre;
            editProveedor.Direccion = proveedor.Direccion;
            editProveedor.Telefono = proveedor.Telefono;
        }
    }

    private async Task HandleValidSubmit()
    {
        var success = await ProveedorService.UpdateProveedorAsync(id, editProveedor);
        if (success)
        {
            NavigationManager.NavigateTo("/proveedores");
        }
        else
        {
            // Handle error
        }
    }
}
