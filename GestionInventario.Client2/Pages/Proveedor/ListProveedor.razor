@page "/proveedores"
@using GestionInventario.Client2.Services.Proveedor
@using GestionInventarios.Shared.DTOs.Proveedor
@inject IProveedorService ProveedorService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h3 class="mb-4">Proveedores</h3>

    @if (proveedores == null)
    {
        <div class="alert alert-info" role="alert">
            <strong>Cargando...</strong>
        </div>
    }
    else
    {
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Dirección</th>
                    <th>Teléfono</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var proveedor in proveedores)
                {
                    <tr>
                        <td>@proveedor.ProveedorId</td>
                        <td>@proveedor.Nombre</td>
                        <td>@proveedor.Direccion</td>
                        <td>@proveedor.Telefono</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditProveedor(proveedor.ProveedorId)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteProveedor(proveedor.ProveedorId)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick="CreateProveedor">Crear Nuevo Proveedor</button>
    }
</div>

@code {
    private List<ProveedorGetDTO> proveedores;

    protected override async Task OnInitializedAsync()
    {
        proveedores = await ProveedorService.GetProveedoresAsync();
    }

    private void CreateProveedor()
    {
        NavigationManager.NavigateTo("/proveedores/create");
    }

    private void EditProveedor(int id)
    {
        NavigationManager.NavigateTo($"/proveedores/edit/{id}");
    }

    private async Task DeleteProveedor(int id)
    {
        await ProveedorService.DeleteProveedorAsync(id);
        proveedores = await ProveedorService.GetProveedoresAsync(); // Reload the list
    }
}
